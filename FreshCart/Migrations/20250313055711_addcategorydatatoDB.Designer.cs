// <auto-generated />
using System;
using FreshCart.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreshCart.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250313055711_addcategorydatatoDB")]
    partial class addcategorydatatoDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BrandCategory");
                });

            modelBuilder.Entity("BrandSubCategory", b =>
                {
                    b.Property<Guid>("BrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandsId", "SubCategoriesId");

                    b.HasIndex("SubCategoriesId");

                    b.ToTable("BrandSubCategory");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bbb9a6e-27f2-49ca-a62a-59f04c940090"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8750),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511964020.jpeg",
                            Name = "Music",
                            Slug = "music",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8753)
                        },
                        new
                        {
                            Id = new Guid("40d9125c-01b3-4084-b60f-2a4fee924765"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8756),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511865180.jpeg",
                            Name = "Men's Fashion",
                            Slug = "men's-fashion",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8757)
                        },
                        new
                        {
                            Id = new Guid("046a4dd7-9529-4de1-bcd9-25e1f188577d"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8760),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511818071.jpeg",
                            Name = "Women's Fashion",
                            Slug = "women's-fashion",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8760)
                        },
                        new
                        {
                            Id = new Guid("451bbac9-4ae4-4c3d-a957-5c855af41d26"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8763),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511452254.png",
                            Name = "SuperMarket",
                            Slug = "supermarket",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8763)
                        },
                        new
                        {
                            Id = new Guid("bbb1a413-c3b4-455f-abb2-0cddf59cf2dd"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8777),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511427130.png",
                            Name = "Baby & Toys",
                            Slug = "baby-and-toys",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8778)
                        },
                        new
                        {
                            Id = new Guid("67f73162-8eff-43fe-b693-3951a800b20d"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8781),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511392672.png",
                            Name = "Home",
                            Slug = "home",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8782)
                        },
                        new
                        {
                            Id = new Guid("b39860b5-91b7-41dd-b52b-22d2ee9c4ec4"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8784),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511368164.png",
                            Name = "Books",
                            Slug = "books",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8785)
                        },
                        new
                        {
                            Id = new Guid("41c1d6bf-035b-490d-a5a5-80990a61ac32"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8787),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511179514.png",
                            Name = "Beauty & Health",
                            Slug = "beauty-and-health",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8788)
                        },
                        new
                        {
                            Id = new Guid("716b7818-280f-4c6d-b221-010b314d6929"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8791),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511156008.png",
                            Name = "Mobiles",
                            Slug = "mobiles",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8791)
                        },
                        new
                        {
                            Id = new Guid("9e89c85a-3d53-4dc0-b76f-8ca8f070caba"),
                            CreatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8794),
                            ImageUrl = "https://ecommerce.routemisr.com/Route-Academy-categories/1681511121316.png",
                            Name = "Electronics",
                            Slug = "electronics",
                            UpdatedAt = new DateTime(2025, 3, 13, 5, 57, 7, 576, DateTimeKind.Utc).AddTicks(8794)
                        });
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageCoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("RatingsAverage")
                        .HasColumnType("float");

                    b.Property<int>("RatingsQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("BrandCategory", b =>
                {
                    b.HasOne("FreshCart.Models.Domain.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshCart.Models.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandSubCategory", b =>
                {
                    b.HasOne("FreshCart.Models.Domain.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshCart.Models.Domain.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Product", b =>
                {
                    b.HasOne("FreshCart.Models.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshCart.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.SubCategory", b =>
                {
                    b.HasOne("FreshCart.Models.Domain.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshCart.Models.Domain.Product", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("FreshCart.Models.Domain.Product", b =>
                {
                    b.Navigation("SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
